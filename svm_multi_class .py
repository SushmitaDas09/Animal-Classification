# -*- coding: utf-8 -*-
"""svm-multi-class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O7uWF4j7VhmQLC9WQ3sS1c60uiJcl_Sn
"""

from google.colab import drive

drive.mount('/content/gdrive')

import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
import random
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier



    
path1 = '/content/gdrive/MyDrive/raw-img'
categories = ["butterfly","cat","cow","dog","elephant","hen","horse","sheep","spider","squirrel"]
data = []

for category in categories:
    path2 = category
    label = categories.index(category)
    path = os.path.join(path1,path2)
    for img in os.listdir(path)[1:1000]:
        img_path = os.path.join(path,img)
        pet_img = cv2.imread(img_path)
        pet_img = cv2.resize(pet_img,(120,120))
        image = np.array(pet_img).flatten()
        data.append([image,label])

features = []
labels = []

for feature, label in data:
    features.append(feature)
    labels.append(label)

import pickle

x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size = 0.25)

model = OneVsRestClassifier(SVC(C=0.5)).fit(x_train, y_train)
model.fit(x_train, y_train)
pick = open('model_multi_01.sav' ,'wb')
pickle.dump(model,pick)
pick.close()

pick = open('model_multi_01.sav','rb')
model = pickle.load(pick)
pick.close()

prediction = model.predict(x_test)
# accuracy = model.score(x_test,prediction)
# print(accuracy)

#for C=0.1
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,prediction)
print(accuracy)

#for C=0.01

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,prediction)
print(accuracy)

#for C=1

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,prediction)
print(accuracy)


for i in range(10):
  pet = x_test[i]
  pet = x_test[i].reshape((120,120,3))
  plt.figure()
  plt.imshow(pet)
  print("Prediction is: ", categories[prediction[i]])